#!/usr/bin/env python3
"""
Add demo products to the database with base64 images
"""

import asyncio
import base64
import httpx
from motor.motor_asyncio import AsyncIOMotorClient
import os
from dotenv import load_dotenv
from pathlib import Path

# Load environment variables from backend directory
ROOT_DIR = Path(__file__).parent / "backend"
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ['MONGO_URL']
db_name = os.environ['DB_NAME']

async def download_and_encode_image(url):
    """Download image from URL and encode to base64"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            if response.status_code == 200:
                image_data = response.content
                base64_image = base64.b64encode(image_data).decode('utf-8')
                return base64_image
            else:
                print(f"Failed to download image from {url}")
                return None
    except Exception as e:
        print(f"Error downloading image: {e}")
        return None

async def add_demo_products():
    """Add demo products to database"""
    
    # Connect to MongoDB
    client = AsyncIOMotorClient(mongo_url)
    db = client[db_name]
    
    # Product data with image URLs
    products = [
        {
            "id": "demo-1",
            "name": "–ù–∞–±–æ—Ä –∫–æ—Å–º–µ—Ç–∏–∫–∏ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞",
            "description": "–†–æ—Å–∫–æ—à–Ω—ã–π –Ω–∞–±–æ—Ä –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É—Ö–æ–¥–∞. –í–∫–ª—é—á–∞–µ—Ç –∫—Ä–µ–º –¥–ª—è –ª–∏—Ü–∞, —Å—ã–≤–æ—Ä–æ—Ç–∫—É –∏ –ª–æ—Å—å–æ–Ω.",
            "price": 5999.99,
            "category": "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
            "stock": 25,
            "status": "active",
            "created_by": "admin",
            "image_url": "https://images.unsplash.com/photo-1629198688000-71f23e745b6e?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NDQ2NDN8MHwxfHNlYXJjaHwxfHxwcm9kdWN0c3xlbnwwfHx8fDE3NTI0MjM3MzZ8MA&ixlib=rb-4.1.0&q=85"
        },
        {
            "id": "demo-2", 
            "name": "–ù–∞–±–æ—Ä —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã",
            "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã: –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏, –Ω–æ—É—Ç–±—É–∫ –∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.",
            "price": 89999.99,
            "category": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
            "stock": 12,
            "status": "active",
            "created_by": "admin",
            "image_url": "https://images.unsplash.com/photo-1498049794561-7780e7231661?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NTY2NzB8MHwxfHNlYXJjaHwxfHxlbGVjdHJvbmljc3xlbnwwfHx8fDE3NTI0Mzk5NzZ8MA&ixlib=rb-4.1.0&q=85"
        },
        {
            "id": "demo-3",
            "name": "Curology - –°–∏—Å—Ç–µ–º–∞ —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π",
            "description": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–∞–≤–æ–º, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∞–º–∏.",
            "price": 3499.99,
            "category": "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
            "stock": 35,
            "status": "active",
            "created_by": "admin",
            "image_url": "https://images.unsplash.com/photo-1571781926291-c477ebfd024b?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NDQ2NDN8MHwxfHNlYXJjaHwzfHxwcm9kdWN0c3xlbnwwfHx8fDE3NTI0MjM3MzZ8MA&ixlib=rb-4.1.0&q=85"
        },
        {
            "id": "demo-4",
            "name": "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è —É—Ö–æ–¥–∞",
            "description": "–°—Ç–∏–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É—Ö–æ–¥–∞ –≤ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —á–µ—Ä–Ω–æ-–±–µ–ª–æ–º –¥–∏–∑–∞–π–Ω–µ.",
            "price": 2799.99,
            "category": "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
            "stock": 45,
            "status": "active",
            "created_by": "admin",
            "image_url": "https://images.unsplash.com/photo-1611930022073-b7a4ba5fcccd?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NDQ2NDN8MHwxfHNlYXJjaHwyfHxwcm9kdWN0c3xlbnwwfHx8fDE3NTI0MjM3MzZ8MA&ixlib=rb-4.1.0&q=85"
        },
        {
            "id": "demo-5",
            "name": "–°–º–∞—Ä—Ç—Ñ–æ–Ω –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞",
            "description": "–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω —Å –∫–∞–º–µ—Ä–æ–π 108MP, OLED –¥–∏—Å–ø–ª–µ–µ–º –∏ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–º 5000mAh.",
            "price": 79999.99,
            "category": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
            "stock": 18,
            "status": "active",
            "created_by": "admin",
            "image_url": "https://images.unsplash.com/photo-1498049794561-7780e7231661?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NTY2NzB8MHwxfHNlYXJjaHwxfHxlbGVjdHJvbmljc3xlbnwwfHx8fDE3NTI0Mzk5NzZ8MA&ixlib=rb-4.1.0&q=85"
        },
        {
            "id": "demo-6",
            "name": "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ Pro",
            "description": "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º —Ä–∞–±–æ—Ç—ã –¥–æ 30 —á–∞—Å–æ–≤.",
            "price": 15999.99,
            "category": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
            "stock": 22,
            "status": "active",
            "created_by": "admin",
            "image_url": "https://images.unsplash.com/photo-1498049794561-7780e7231661?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NTY2NzB8MHwxfHNlYXJjaHwxfHxlbGVjdHJvbmljc3xlbnwwfHx8fDE3NTI0Mzk5NzZ8MA&ixlib=rb-4.1.0&q=85"
        }
    ]
    
    # Process each product
    for product in products:
        print(f"Processing product: {product['name']}")
        
        # Download and encode image
        image_base64 = await download_and_encode_image(product['image_url'])
        
        if image_base64:
            # Add timestamps
            from datetime import datetime
            now = datetime.utcnow()
            
            # Create product document
            product_doc = {
                "id": product['id'],
                "name": product['name'],
                "description": product['description'],
                "price": product['price'],
                "category": product['category'],
                "stock": product['stock'],
                "status": product['status'],
                "created_by": product['created_by'],
                "images": [image_base64],  # Store as base64
                "created_at": now,
                "updated_at": now
            }
            
            # Insert or update product
            await db.products.replace_one(
                {"id": product['id']}, 
                product_doc, 
                upsert=True
            )
            print(f"‚úÖ Added product: {product['name']}")
        else:
            print(f"‚ùå Failed to process product: {product['name']}")
    
    print("\nüéâ Demo products added successfully!")
    client.close()

if __name__ == "__main__":
    asyncio.run(add_demo_products())